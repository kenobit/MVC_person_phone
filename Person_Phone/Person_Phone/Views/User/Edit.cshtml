@model PersonDB_project.Models.UserViewModel

@{
    ViewBag.Title = "Edit";
}
<script type="text/javascript">
    function removeInput(elem) {
        elem.parentNode.remove();
    }
</script>

@using (Ajax.BeginForm("Edit", "User", new AjaxOptions { OnSuccess = "CRUDResult", UpdateTargetId = "MainContainer" }))
{
    <div class="form-horizontal">

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="">
            <div>
                @Html.LabelFor(model => model.Phones, htmlAttributes: new { @class = "control-label" })
            </div>
            @if (Model.Phones.Count == 0)
            {
                <span> У пользователя нет телефона</span>
            }
            else
            {<div id="Phones" class="phones_block ">
                @for (int i = 0; i < Model.Phones.Count; i++)
                {

                    @Html.HiddenFor(hidden => Model.Phones[i].UserId)
                    @Html.HiddenFor(hidden => Model.Phones[i].Id)
                    <div class="form-group">
                      <div class="control-label col-md-2">
                            <span class="modal_body_input_label_text">
                                Type
                            </span>
                        </div>
                        <div class="col-md-10">
                            @Html.EditorFor(type => Model.Phones[i].PhoneType, new { htmlAttributes = new { @class = "form-control nav-justified" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <span class="modal_body_input_label_text">
                                Number
                            </span>
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(number => Model.Phones[i].PhoneNumber, new { htmlAttributes = new { @class = "form-control nav-justified" } })
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-danger" onclick="removeInput(this)">-</button>
                        </div>
                    </div>
                    if (false)
                    {
                        @Model.Phones.Remove(Model.Phones[i])
                    }
                }
            </div><br />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-12">
                    <input type="submit" value="Save" class="btn btn-group-justified btn-success" />
                </div>
            </div>
            }
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


